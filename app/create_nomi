: << END_WIN
@ECHO OFF
::
:: ============================================================================
:: === The LICENSE for this script can be found at the bottom of this file ====
:: ============================================================================
::
:: This is the Windows part of the script.

SETLOCAL ENABLEDELAYEDEXPANSION

ECHO ===========================================================================
ECHO ============================= Create a Nomi ===============================
ECHO ===========================================================================
ECHO:
ECHO Use this script to create a new Nomi, or to verify an existing Nomi's
ECHO configuration.
ECHO:
ECHO If you ever want to quit the script, simply press CTRL+C together.
ECHO:

SET NOMI_NAME=example_nomi
SET CONFIG_FILE_NAME=%NOMI_NAME%.conf

:: Get the current directory
SET "SCRIPT_ROOT=%~dp0"
SET "CONFIG_FILE=%SCRIPT_ROOT%%CONFIG_FILE_NAME%"

:: Check if Docker is installed
docker --version >NUL 2>&1
IF ERRORLEVEL 1 (
    ECHO Could not find Docker. Please re-run the installation script.
    GOTO cleanup
)

ECHO This feature is not yet implemented.

:: All done! Let's exit from the Windows part of the script
:cleanup
ENDLOCAL
PAUSE
ECHO You may now close this window
EXIT /B
END_WIN

# This is the macOS/Linux part of the script. We have to do
# The same steps here, but in a way that works for Bash.

# Perform some basic sanity checks, then continue execution
if [ -z "${BASH_VERSION:-}" ]; then
    # Attempt to find Bash
    if command -v bash >/dev/null 2>&1; then
        # Re-execute the script with Bash by reading it from stdin if necessary
        if [ -t 0 ]; then
            # If the script is not being piped, re-execute the file with bash
            exec bash "$0" "$@"
        else
            # If the script is being piped (non-interactive), re-execute from stdin
            exec bash <(cat) "$@"
        fi
    else
        # Unable to find Bash. Exit with an error
        echo "Bash is required to run this script." >&2
        exit 1
    fi
fi

# Trap to function when we exit
trap "cleanup" EXIT INT

# Cleanup function
function cleanup() {
    exit_code=$?
    exit $exit_code
}

# Prompt for and confirm user input
function prompt_confirm() {
    read -r -p "$1 [y/N] " RESPONSE </dev/tty
    case "$RESPONSE" in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            false
            ;;
    esac
}

# Prompt for variable values
function prompt_variable() {
    local var_name=$1
    local current_value=$2
    read -r -p "Enter $var_name [$current_value]: " VALUE </dev/tty
    echo "${VALUE:-$current_value}"
}

# Get a script and make it executable based on the OS name
function get_script() {
    local source_file="$1"
    local destination_dir="$2"

    # Check if the source file exists
    if [ ! -f "$source_file" ]; then
        echo "Error: Source file '$source_file' not found!"
        return 1
    fi

    local base_filename="$(basename "$source_file")"

    # Determine the destination file based on the OS
    if [ "$(uname -s)" == "Darwin" ]; then
        destination_file="${destination_dir}/${base_filename%.sh}.command"
    elif [ "$(uname -s)" == "Linux" ]; then
        destination_file="${destination_dir}/${base_filename%.sh}.sh"
    else
        echo "Error: Unsupported operating system '$(uname -s)'."
        return 1
    fi
    echo "#!/usr/bin/env bash" > "$destination_file"
    cat "$source_file" >> "$destination_file"

    chmod +x "$destination_file"
}

# Manage existing Nomi configuration file
function manage_existing_nomi() {
    local NOMI_NAME=$1
    local CONF_FILE=$2

    while true; do
        # Prompt for values, showing current ones
        NOMI_NAME=$(prompt_variable "NOMI_NAME" "$(grep -m1 '^NOMI_NAME=' "$CONF_FILE" | cut -d '=' -f2)")
        DISCORD_API_TOKEN=$(prompt_variable "DISCORD_API_TOKEN" "$(grep -m1 '^DISCORD_API_TOKEN=' "$CONF_FILE" | cut -d '=' -f2)")
        NOMI_API_KEY=$(prompt_variable "NOMI_API_KEY" "$(grep -m1 '^NOMI_API_KEY=' "$CONF_FILE" | cut -d '=' -f2)")
        NOMI_ID=$(prompt_variable "NOMI_ID" "$(grep -m1 '^NOMI_ID=' "$CONF_FILE" | cut -d '=' -f2)")

        # Display and confirm values
        echo "Configuration for $NOMI_NAME:"
        echo "NOMI_NAME: $NOMI_NAME"
        echo "DISCORD_API_TOKEN: $DISCORD_API_TOKEN"
        echo "NOMI_API_KEY: $NOMI_API_KEY"
        echo "NOMI_ID: $NOMI_ID"

            if prompt_confirm "Are these values correct?"; then
            # Save the config
            if [ "$(uname -s)" == "Darwin" ]; then
                sed -i "" "s/^NOMI_NAME=.*/NOMI_NAME=$NOMI_NAME/" "$CONF_FILE"
                sed -i "" "s/^DISCORD_API_TOKEN=.*/DISCORD_API_TOKEN=$DISCORD_API_TOKEN/" "$CONF_FILE"
                sed -i "" "s/^NOMI_API_KEY=.*/NOMI_API_KEY=$NOMI_API_KEY/" "$CONF_FILE"
                sed -i "" "s/^NOMI_ID=.*/NOMI_ID=$NOMI_ID/" "$CONF_FILE"
            elif [ "$(uname -s)" == "Linux" ]; then
                sed -i "s/^NOMI_NAME=.*/NOMI_NAME=$NOMI_NAME/" "$CONF_FILE"
                sed -i "s/^DISCORD_API_TOKEN=.*/DISCORD_API_TOKEN=$DISCORD_API_TOKEN/" "$CONF_FILE"
                sed -i "s/^NOMI_API_KEY=.*/NOMI_API_KEY=$NOMI_API_KEY/" "$CONF_FILE"
                sed -i "s/^NOMI_ID=.*/NOMI_ID=$NOMI_ID/" "$CONF_FILE"
            else
                echo "Error: Unsupported operating system '$(uname -s)'."
                return 1
            fi
            break
        fi
    done

    NOMI_FILENAME=$(echo -n $NOMI_NAME | tr '[:upper:]' '[:lower:]' | tr -c 'a-z0-9.-' '_' | sed 's/_*$//')
    START_SCRIPT="$SCRIPT_ROOT/start_$NOMI_FILENAME.*"

    if prompt_confirm "Do you want to start this Nomi now?"; then
        "$START_SCRIPT"
    else
        echo #"You can start $NOMI_NAME by executing $(basename $START_SCRIPT)"
    fi
}

# Create new Nomi configuration file
function create_new_nomi() {
    while true; do
        read -r -p "Enter a new Nomi name: " NOMI_NAME </dev/tty

        # Check for existing Nomi with the same name
        if [ -f "$NOMI_NAME.conf" ]; then
            if prompt_confirm "$NOMI_NAME.conf exists. Overwrite?"; then
                echo "Overwriting..."
            else
                if ! prompt_confirm "Choose a new name?"; then
                    break
                fi
            fi
        else
            break
        fi
    done

    NOMI_FILENAME=$(echo -n $NOMI_NAME | tr '[:upper:]' '[:lower:]' | tr -c 'a-z0-9.-' '_' | sed 's/_*$//')

    # Copy example files
    cp "$SCRIPT_ROOT/app/nomi_conf.example" "$SCRIPT_ROOT/$NOMI_FILENAME.conf"
    cp "$SCRIPT_ROOT/app/start_nomi" "$SCRIPT_ROOT/start_$NOMI_FILENAME"

    get_script "$SCRIPT_ROOT/start_$NOMI_FILENAME" "$SCRIPT_ROOT"
    rm "$SCRIPT_ROOT/start_$NOMI_FILENAME"

    # Populate start_nomi file
    if [ "$(uname -s)" == "Darwin" ]; then
        sed -i "" "s/^CONFIG_FILE_NAME=.*/CONFIG_FILE_NAME=$NOMI_FILENAME.conf/" "$SCRIPT_ROOT/start_$NOMI_FILENAME.command"
    elif [ "$(uname -s)" == "Linux" ]; then
        sed -i "s/^CONFIG_FILE_NAME=.*/CONFIG_FILE_NAME=$NOMI_FILENAME.conf/" "$SCRIPT_ROOT/start_$NOMI_FILENAME.sh"
    else
        echo "Error: Unsupported operating system '$(uname -s)'."
        return 1
    fi

    # Populate nomi.conf file
    if [ "$(uname -s)" == "Darwin" ]; then
        sed -i "" "s/^NOMI_NAME=.*/NOMI_NAME=$NOMI_NAME/" "$SCRIPT_ROOT/$NOMI_FILENAME.conf"
    elif [ "$(uname -s)" == "Linux" ]; then
        sed -i "s/^NOMI_NAME=.*/NOMI_NAME=$NOMI_NAME/" "$SCRIPT_ROOT/$NOMI_FILENAME.conf"
    else
        echo "Error: Unsupported operating system '$(uname -s)'."
        return 1
    fi

    manage_existing_nomi "$NOMI_NAME" "$CONF_FILE"
}

echo "==========================================================================="
echo "============================= Create a Nomi ==============================="
echo "==========================================================================="
echo
echo "Use this script to create a new Nomi, or to verify an existing Nomi's"
echo "configuration."
echo
echo "If you ever want to quit the script, simply press CTRL+C together"
echo

# Check if Docker is installed
if ! command -v docker >/dev/null 2>&1; then
    echo "Could not find Docker. Please re-run the installation script"
    exit 1
fi

SCRIPT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Find all nomi.conf files and extract NOMI_NAME
CONF_FILES=()
NOMI_NAMES=()

find "$SCRIPT_ROOT" -maxdepth 1 -name '*' -exec bash -c '
    for FILE; do
        echo $FILE
        CONF_FILES+=("$FILE")
        NOMI_NAME=$(grep -m1 "^NOMI_NAME=" "$FILE" | cut -d "=" -f2)
        NOMI_NAME=${NOMI_NAME:-"(Unknown Nomi)"}
        NOMI_NAMES+=("$NOMI_NAME")
        echo "Processed $FILE with Nomi Name: $NOMI_NAME"
    done
' _ {} +

# List Nomi names if there are any, or prompt to create new
if [ "${#CONF_FILES[@]}" -eq 0 ]; then
    echo "No Nomi configuration files found."
    prompt_confirm "Do you want to create a new Nomi?" && create_new_nomi
else
    echo "These Nomi configuration files were found:"
    for i in "${!NOMI_NAMES[@]}"; do
        echo "$((i+1)). ${NOMI_NAMES[$i]}"
    done

    read -r -p "Choose a Nomi by number or type 'new' to create a new Nomi: " CHOICE </dev/tty

    if [[ "$CHOICE" =~ ^[0-9]+$ ]] && [ "$CHOICE" -le "${#NOMI_NAMES[@]}" ]; then
        SELECTED_NOMI="${NOMI_NAMES[$((CHOICE-1))]}"
        SELECTED_CONF="${CONF_FILES[$((CHOICE-1))]}"
        manage_existing_nomi "$SELECTED_NOMI" "$SELECTED_CONF"
    elif [ "$CHOICE" == "new" ]; then
        create_new_nomi
    else
        echo "Invalid selection."
        exit 1
    fi
fi

echo "You may now close this window"
echo

# All done! Let's exit from the macOS/Linux part of the script
exit 0

===============================================================================
================================== LICENSE ====================================
===============================================================================

LICENSE

Copyright (c) 2024-present toru173 and contributors

Redistribution and use in source and binary forms, with or without
modification, are permitted (subject to the limitations in the disclaimer
below) provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.
* Neither the name of the copyright holder nor the names of the contributors
  may be used to endorse or promote products derived from this software
  without specific prior written permission.

NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#    # Prompt for values
#    DISCORD_API_TOKEN=$(prompt_variable "DISCORD_API_TOKEN" "")
#    NOMI_API_KEY=$(prompt_variable "NOMI_API_KEY" "")
#    NOMI_ID=$(prompt_variable "NOMI_ID" "")

#        sed -i "" "s/^DISCORD_API_TOKEN=.*/DISCORD_API_TOKEN=$DISCORD_API_TOKEN/" "$CONF_FILE"
#        sed -i "" "s/^NOMI_API_KEY=.*/NOMI_API_KEY=$NOMI_API_KEY/" "$CONF_FILE"
#        sed -i "" "s/^NOMI_ID=.*/NOMI_ID=$NOMI_ID/" "$CONF_FILE"

#        sed -i "s/^DISCORD_API_TOKEN=.*/DISCORD_API_TOKEN=$DISCORD_API_TOKEN/" "$CONF_FILE"
#        sed -i "s/^NOMI_API_KEY=.*/NOMI_API_KEY=$NOMI_API_KEY/" "$CONF_FILE"
#        sed -i "s/^NOMI_ID=.*/NOMI_ID=$NOMI_ID/" "$CONF_FILE"
