: << END_WIN
@ECHO OFF
::
:: ============================================================================
:: === The LICENSE for this script can be found at the bottom of this file ====
:: ============================================================================
::
:: This is the Windows part of the script.

SETLOCAL ENABLEDELAYEDEXPANSION

ECHO ===========================================================================
ECHO ============================= Nomi Launcher ===============================
ECHO ===========================================================================
ECHO:
ECHO This launcher will start a Nomi running in a Docker container.
ECHO:
ECHO If you ever want to quit the script, simply press CTRL+C together.
ECHO:

:: Get absolute path to app directory
FOR %%I IN ("%~dp0") DO SET "SCRIPT_ROOT=%%~fI"

SET "NOMI_NAME=placeholder_nomi_name"
SET DOCKER_IMAGE_NAME=placeholder_docker_image_name

SET CONFIG_FILE_NAME=%DOCKER_IMAGE_NAME%.conf
SET "CONFIG_FILE=%SCRIPT_ROOT%%CONFIG_FILE_NAME%"

SET "APP_DIR=app"
SET "APP_PATH=%SCRIPT_ROOT%\..\%APP_DIR%%"

:: Check if Docker is installed
docker --version >NUL 2>&1
IF ERRORLEVEL 1 (
    ECHO Could not find Docker. Please re-run the installation script.
    GOTO cleanup
)

:: Check if Docker daemon is running
docker info >NUL 2>&1
IF ERRORLEVEL 1 (
    ECHO Docker is installed but the Docker daemon is not running. Please start Docker before continuing.
    GOTO cleanup
)

:: Check for a configuration file
IF EXIST "%CONFIG_FILE%" (
    ECHO Found %NOMI_NAME%'s configuration file. Reading contents...
) ELSE (
    ECHO A configuration file for %NOMI_NAME% was not found. Please re-run
    ECHO the setup script to set up %NOMI_NAME%.
    GOTO cleanup
)

:: Read the config file
FOR /F "usebackq tokens=* delims=" %%A IN ("%CONFIG_FILE%") DO (
    SET "LINE=%%A"
    :: Skip empty lines
    IF NOT "!LINE!"=="" (
        :: Skip comment lines starting with #
        IF NOT "!LINE:~0,1!"=="#" (
            :: Parse the KEY and VALUE
            FOR /F "tokens=1* delims==" %%K IN ("!LINE!") DO (
                SET "KEY=%%K"
                SET "VALUE=%%L"
                :: Trim spaces from KEY and VALUE
                FOR /F "tokens=* delims= " %%a IN ("!KEY!") DO SET "KEY=%%a"
                FOR /F "tokens=* delims= " %%a IN ("!VALUE!") DO SET "VALUE=%%a"
                :: Set the variable
                SET "!KEY!=!VALUE!"
            )
        )
    )
)

:: Check required variables are in the configuration file
SET MISSING_VARIABLE=FALSE
FOR %%V IN (DISCORD_API_KEY NOMI_API_KEY NOMI_NAME NOMI_ID) DO (
    IF "%%~V"=="" (
        ECHO %%V not found in the configuration file.
        SET MISSING_VARIABLE=TRUE
    )
)

IF "%MISSING_VARIABLE%"=="TRUE" (
    ECHO There was an error reading the configuration file for %NOMI_NAME%.
    ECHO Please re-run the create_nomi script to set up %NOMI_NAME%, or
    ECHO open the configuration file in a text editor to inspect the
    ECHO missing values.
    GOTO cleanup
)

:: Check if a Docker container already exists and remove it
docker inspect %DOCKER_IMAGE_NAME% >NUL 2>&1
IF NOT ERRORLEVEL 1 (
    ECHO A Docker container named %NOMI_NAME% exists. Removing container...
    docker container rm -f %DOCKER_IMAGE_NAME% >NUL 2>&1
    IF ERRORLEVEL 1 (
        ECHO Error when removing container: %ERRORLEVEL%
        GOTO cleanup
    )
)

:: Build the Docker container
ECHO Building a Docker container for %NOMI_NAME%
docker build -t %DOCKER_IMAGE_NAME% "%APP_PATH%" >NUL 2>&1
IF ERRORLEVEL 1 (
    ECHO Error when building container: %ERRORLEVEL%
    GOTO cleanup
)

:: Run the Docker container
ECHO %NOMI_NAME%'s container built successfully. Running container...
docker run -d --name %DOCKER_IMAGE_NAME% --env-file "%CONFIG_FILE%" %DOCKER_IMAGE_NAME% >NUL 2>&1
IF ERRORLEVEL 1 (
    ECHO Error when running container: %ERRORLEVEL%
    GOTO cleanup
)

ECHO %NOMI_NAME%'s container is running! You can now talk to %NOMI_NAME% on Discord.
ECHO:
ECHO To invite %NOMI_NAME% to Discord you can copy and paste the invitation URL
ECHO into a browser:
ECHO:
ECHO %DISCORD_INVITE_URL%
ECHO:
ECHO Make sure you do not share your config file with ANYONE.

:: All done! Let's exit from the Windows part of the script
:cleanup
ENDLOCAL
PAUSE
ECHO You may now close this window
EXIT /B
END_WIN

# This is the macOS/Linux part of the script. We have to do
# The same steps here, but in a way that works for Bash.

# Perform some basic sanity checks, then continue execution
if [ -z "${BASH_VERSION:-}" ]; then
    # Attempt to find Bash
    if command -v bash  > /dev/null 2>&1; then
        # Re-execute the script with Bash by reading it from stdin if necessary
        if [ -t 0 ]; then
            # If the script is not being piped, re-execute the file with bash
            bash "$0" "$@"
        else
            # If the script is being piped (non-interactive), re-execute from stdin
            bash -s "$@" < /dev/stdin
            exit $?
        fi
    else
        # Unable to find Bash. Exit with an error
        echo "Bash is required to run this script." >&2
        exit 1
    fi
fi

# Trap to function when we exit
trap "cleanup" EXIT INT

# Cleanup function
function cleanup() {
    exit_code=$?
    exit $exit_code
}

# Prompt for and confirm user input
function prompt_confirm() {
    read -r -p "$1 [y/N] " RESPONSE </dev/tty
    case "$RESPONSE" in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            false
            ;;
    esac
}

echo "==========================================================================="
echo "============================= Nomi Launcher ==============================="
echo "==========================================================================="
echo
echo "This launcher will start a Nomi running in a Docker container."
echo
echo "If you ever want to quit the script, simply press CTRL+C together"
echo

SCRIPT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
APP_DIR="app"
APP_PATH="$SCRIPT_ROOT/../$APP_DIR"

NOMI_NAME="placeholder_nomi_name"
DOCKER_IMAGE_NAME=placeholder_docker_image_name

CONFIG_FILE_NAME=$DOCKER_IMAGE_NAME.conf
CONFIG_FILE="$SCRIPT_ROOT/$CONFIG_FILE_NAME"

# Check if Docker is installed
if ! command -v docker  > /dev/null 2>&1; then
    echo "Could not find Docker. Please re-run the installation script"
    exit 1
fi

# Check if the Docker daemon is running
if ! docker info  > /dev/null 2>&1; then
    echo "Docker is installed but the Docker daemon is not running. Please start Docker before continuing."
    exit 1
fi

# Check for a configuration file
if [ -f "$CONFIG_FILE" ]; then
    # Inform user we've found the config file
    echo "Found $NOMI_NAME's configuration file. Reading contents..."
    source "$CONFIG_FILE"
else
    # No configuration file found. Ask the user to run create_nomi to set one up
    echo "A configuration file for $NOMI_NAME was not found. Please re-run"
    echo "the create_nomi script to set up $NOMI_NAME"
    exit 1
fi

# Check required variables are in the configuration file
REQUIRED_VARIABLES=("DISCORD_API_KEY" "NOMI_API_KEY" "NOMI_NAME" "NOMI_ID")

MISSING_VARIABLE=false
for var in "${REQUIRED_VARIABLES[@]}"; do
    # Check if the variable is unset or empty
    if [ -z "${!var}" ]; then
        echo "$var not found in the configuration file"
        MISSING_VARIABLE=true
    fi
done

if [ MISSING_VARIABLE == true ]; then
    echo "There was an error reading the configuration file for $NOMI_NAME."
    echo "Please re-run the create_nomi script to set up $NOMI_NAME, or"
    echo "open the configuration file in a text editor to inspect the"
    echo "missing values"
    exit 1
fi

if docker inspect $DOCKER_IMAGE_NAME  > /dev/null 2>&1; then
    echo "A Docker container named $NOMI_NAME exists. Removing container..."
    docker container rm -f $DOCKER_IMAGE_NAME  > /dev/null 2>&1
    EXIT_CODE=$?
    if [[ $EXIT_CODE -ne 0 ]]; then
        echo "Error when removing container: $EXIT_CODE"
        exit 1
    fi
fi

echo "Building a Docker container for $NOMI_NAME"
echo "The container will be called '$DOCKER_IMAGE_NAME'"

docker build -t "$DOCKER_IMAGE_NAME" "$APP_PATH"  > /dev/null 2>&1
EXIT_CODE=$?
if [[ $EXIT_CODE -ne 0 ]]; then
    echo "Error when building container: $EXIT_CODE"
    exit 1
fi

echo "$NOMI_NAME's container built succesfully. Running container..."

docker run -d --name "$DOCKER_IMAGE_NAME" --env-file "$CONFIG_FILE" "$DOCKER_IMAGE_NAME"  > /dev/null 2>&1
EXIT_CODE=$?
if [[ $EXIT_CODE -ne 0 ]]; then
    echo "Error when running container: $EXIT_CODE"
    exit 1
fi

echo "$NOMI_NAME's container is running! You can now to talk to $NOMI_NAME on Discord."
echo "To invite $NOMI_NAME to Discord you can copy and paste the invitation URL"
echo "into a browser:"
echo
echo "$DISCORD_INVITE_URL"
echo
echo "Make sure you do not share your config file with ANYONE"
echo "You may now close this window"
echo

# All done! Let's exit from the macOS/Linux part of the script
exit 0

===============================================================================
================================== LICENSE ====================================
===============================================================================

LICENSE

Copyright (c) 2024-present toru173 and contributors

Redistribution and use in source and binary forms, with or without
modification, are permitted (subject to the limitations in the disclaimer
below) provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.
* Neither the name of the copyright holder nor the names of the contributors
  may be used to endorse or promote products derived from this software
  without specific prior written permission.

NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
