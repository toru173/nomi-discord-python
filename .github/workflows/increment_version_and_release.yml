name: Increment VERSION and Create Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  versioning:
    name: Increment Version and Create Release
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Verify 'install' File Exists
      - name: Verify 'install' File Exists
        run: |
            if [ ! -f ./install ]; then
                echo "'install' file not found!"
                exit 1
            fi

      # Fetch the latest release
      - name: Get Latest Release Tag
        id: get_latest_release
        run: |
            LATEST_TAG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
            if [ "$LATEST_TAG" == "null" ]; then
                # Default to v1.0.0 if no releases exist
                LATEST_TAG="v1.0.0"
            fi
            echo "Latest tag: $LATEST_TAG"
            echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT

      # Increment 'incremental' version
      - name: Increment Version
        id: increment_version
        run: |
            VERSION=${{ steps.get_latest_release.outputs.LATEST_TAG }}

            if [[ "$VERSION" == "v1.0.0" ]]; then
                NEW_VERSION="$VERSION"
            else
                # Extract major, minor, and incremental parts
                MAJOR=$(echo $VERSION | cut -d. -f1 | sed 's/v//')
                MINOR=$(echo $VERSION | cut -d. -f2)
                INCREMENTAL=$(echo $VERSION | cut -d. -f3)

                # Increment the incremental part
                NEW_INCREMENTAL=$((INCREMENTAL + 1))
                NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_INCREMENTAL}"
            fi

            echo "New version will be $NEW_VERSION"
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      # Create a release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.increment_version.outputs.NEW_VERSION }}
          release_name: "Release ${{ steps.increment_version.outputs.NEW_VERSION }}"
          draft: false
          prerelease: false

      # Upload the 'install' file to the release
      - name: Upload 'install' File
        id: upload_installer
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./install
          asset_name: install
          asset_content_type: application/octet-stream
